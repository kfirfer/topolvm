image:
  repository: quay.io/topolvm/topolvm
  tag: 0.5.3
  pullPolicy: IfNotPresent

# CSI node service
node:
  metrics:
    annotations:
      prometheus.io/port: "8080"

# CSI controller service
controller:
  replicaCount: 2
  terminationGracePeriodSeconds: 10
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "200Mi"
      cpu: "200m"
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%

# A scheduler extender for TopoLVM
scheduler:
  # If you run with a managed control plane (such as GKE, AKS, etc), topolvm-scheduler should be deployed as Deployment and Service
  # topolvm-scheduler should otherwise be deployed as DaemonSet in unmanaged (i.e. bare metal) deployments
  # possible values:  daemonset/deployment
  type: daemonset
  # Use only if you choose `scheduler.type` deployment
  deployment:
    replicaCount: 2
  terminationGracePeriodSeconds: 10
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "200Mi"
      cpu: "200m"
  options:
    listen:
      host: localhost
      port: 9251

# Whether to create storageclass
storageclass:
  create: true
  # Default storage class for dynamic volume provisioning
  # ref: https://kubernetes.io/docs/concepts/storage/dynamic-provisioning
  defaultclass: true
  # Additional annotations
  annotations: {}
  # ext4 / xfs / btrfs
  fstype: "xfs"
  allowVolumeExpansion: true
  volumeBindingMode: WaitForFirstConsumer

# Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  runAsUser:  10000
  runAsGroup: 10000

# Enable pod security policy
# ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  create: true

crd:
  create: true